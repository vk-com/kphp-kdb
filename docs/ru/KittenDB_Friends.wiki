Интерфейс  [[KittenDB.wiki|KittenDB]] FriendLists/Privacy Engine.

== Папки друзей ==

Папки друзей нумеруются от 1 до 30. Набор папок друзей представляется битовой маской - папке номер k соответствует 2<sup>k</sup>, затем все эти числа складываются. Кроме того, есть фиктивная папка друзей #0, в которой всегда находятся все друзья и у которой не может быть названия.

Например, если друг состоит в папках #1 и #3, то значение его маски папок друзей равно 2<sup>3</sup>+2<sup>1</sup>+2<sup>0</sup>=13.

== Обращение к Friend Engine из PHP ==

<code>$MC_Friends = new Memcache (...);</code>
<br>
Возвращает объект для доступа к друзьям пользователя $id, либо false, если такого объекта нет или соответствующий сервер сейчас недоступен. 

Далее доступ к данным осуществляется по аналогии с memcached, с помощью функций вроде
<pre>
$MC_Friends->get($key);
$result = $MC_Friends->set($key,$value,0,600);
$MC_Friends->delete($key);
$MC_Friends->increment($key,$value);
</pre>
для специально построенных ключей $key и значений $value.

== Список доступных функций ==

=== Удаление пользователя вместе со списком друзей ===

<code>delete("user$id")</code>
<br>
Удаляет информацию о пользователе $id, в частности, его список друзей, и все принадлежащие ему приватности. При этом у его друзей он автоматически не удаляется. После этого почти все операции с данным пользователем будут возвращать <code>false</code>; заново создать пользователя можно, добавив ему друга через <code>set("friend{$id}_{$friend_id}", $mask)</code>.

=== Получение списка друзей ===

<code>get("friends$id")</code>
<br>
<code>get("friends{$id}_$mask")</code>
<br>
<code>get("friends$id#$mode")</code>
<br>
<code>get("friends{$id}_$mask#$mode")</code>
<br>
Получает список друзей пользователя $id. Если указан параметр $mask, возвращаются только те друзья, которые содержатся в одной из папок, перечисленных в $mask (пример: $mask=8 -- только папка #3, $mask=10 -- папки 1 и 3). Параметр $mode равен 0 (значение по умолчанию), 1 (возвращать для каждого друга папки, в которые он входит) или 2 (возвращать для каждого друга набор папок и unixtime его добавления в друзья).
<br>
Результатом является строка, состоящая из чисел в десятичной системе, разделенных запятой. Первое значение - число N, количество друзей в ответе. Далее следует (mode+1)*N чисел, описывающих друзей в порядке возрастания id. Например, для $mode=2 каждый друг описывается тройкой ($friend_id,$cat_mask,$date).
<br>
Если сервер сейчас недоступен или запрос неправильно сформирован, возвращается false. Если список пуст, возвращается строка "0".

=== Получение количества друзей в списке ===
<code>get("friendcnt{$id}")</code>
<br>
<code>get("friendcnt{$id}_{$mask}")</code>
<br>
Возвращает количество друзей пользователя id, всех или принадлежащих одной из папок, заданных маской mask.

=== Получение списка недавно добавленных друзей ===
<code>get("recent_friends$id#$num")</code>
<br>
Возвращает $num последних добавленных друзей пользователя $id в антихронологическом порядке.
<br>
Каждый друг представлен тройкой чисел ($friend_id,$cat,$date).

=== Установка списка друзей, принадлежащих данной папке ===

<code>set("friends{$id}_{$cat}", implode(",", $friend_id_list))</code>
<br>
Устанавливает список друзей пользователя $id, которые должны быть в категории (т.е. папке) $cat, где 1 &lt;= $cat &lt;= 30. Если какого-то пользователя, перечисленного в $friend_id_list, нет в друзьях, он игнорируется (в друзья не добавляется).

=== Получение информации о друге ===
<code>get("friend{$id}_{$friend_id}")</code>
<br>
Возвращает маску папок, ассоциированную с пользователем $friend_id в списке друзей пользователя $id, либо ничего (<code>false</code>), если этого пользователя нет в списке друзей. Следует отметить, что если пользователь есть в списке друзей, значение будет положительным целым числом.

=== Добавление, редактирование и удаление друга ===
<code>set("friend{$id}_{$friend_id}", $mask)</code>
<br>
<code>replace("friend{$id}_{$friend_id}", $mask)</code>
<br>
<code>delete("friend{$id}_{$friend_id}")</code>
<br>
Эти операции соответственно добавляют, редактируют и удаляют пользователя $friend_id внутри списка друзей пользователя $id. Первые две из них устанавливают новую маску папок для этого друга; при этом операция set добавляет пользователя в друзья, если его там еще нет, и даже создает пользователя $id, если до этого о нем не было никакой информации, а replace только редактирует существующего друга. Если не выбрано ни одной папки друзей, следует использовать $mask=1.

=== Добавление друга в папку или удаление из нее ===
<code>increment("friend{$id}_{$friend_id}", $mask)</code>
<br>
<code>decrement("friend{$id}_{$friend_id}", $mask)</code>
<br>
Здесь mask - это маска, задающая набор папок, в которые надо добавить друга или из которых надо его убрать. Следует отметить, что эти операции реализованы с помощью логических OR и AND, а не с помощью сложения и вычитания, т.е. добавление друга в папку, в которой он уже есть, ни на что не повлияет и ничего не испортит. Возвращаемое значение - новая маска папок для данного друга.

=== Удаление папки друзей ===
<code>delete("friend_cat{$user_id}_{$cat}")</code>
<br>
Удаляет папку друзей и все ссылки на нее в списках приватности.

== Заявки в друзья ==

<code>get("friendreq{$id}_{$friend_id}")</code>
<br>
<code>add("friendreq{$id}_{$friend_id}", $mask)</code>
<br>
<code>set("friendreq{$id}_{$friend_id}", $mask)</code>
<br>
<code>replace("friendreq{$id}_{$friend_id}", $mask)</code>
<br>
<code>delete("friendreq{$id}_{$friend_id}")</code>
<br>
Эти функции получают, добавляют, редактируют и удаляют заявку в друзья, поданную пользователем $friend_id на добавление в друзья пользователя $id. Передаваемая маска - это папки друзей, в которые $friend_id хотел бы занести $id в своем списке друзей (а не наоборот). Метод <tt>add</tt> не редактирует уже существующую заявку, а только добавляет новую, а <tt>replace</tt> - наоборот.

<code>delete("requests{$id}")</code>
<br>
Удаляет все заявки в друзья.

<code>get("requests{$id}")</code>
<br>
<code>get("requests{$id}#{$num}")</code>
<br>
Возвращает заявки в друзья, направленные для одобрения пользователю $id. В первом случае заявки возвращаются все заявки в порядке возрастания friend_id (id заявителя), во втором - последние num штук в антихронологическом порядке. Результат - строка, состоящая из 3N+1 числа: первое число - общее количество заявок, следующие N троек описывают заявки в формате ($id,$mask,$date).

== Операции с приватностью ==
''[[KittenDB_Friends_Privacy.wiki|Приватность]]'' -- это некоторый набор правил, определяющих множество пользователей, которым разрешен доступ к тому или иному объекту. В рамках описываемой системы для обращения к приватности надо знать id ее владельца (пользователя, которому принадлежит нужный объект) и некоторый уникальный [[KittenDB_Friends_Privacy.wiki#Ключ приватности|ключ приватности]]. Значение приватности есть набор правил, включающий или исключающих из рассмотрения некоторые папки друзей владельца приватности либо отдельных пользователей. Такой набор правил обычно передается в виде [[KittenDB_Friends_Privacy.wiki#Описание приватности|строки специального вида]].

=== Создание и редактирование приватности ===
<code>set("privacy{$id}_{$priv_key}", $priv_text);</code>
<br>
<code>replace("privacy{$id}_{$priv_key}", $priv_text);</code>
<br>
Здесь id - это id владельца приватности, $priv_key - [[KittenDB_Friends_Privacy.wiki#Ключ приватности|ключ приватности]], $priv_text - [[KittenDB_Friends_Privacy.wiki#Описание приватности|описание приватности]]. Первая из этих функций при необходимости создает несуществующего пользователя и приватность, а вторая только редактирует существующую.

=== Получение приватности ===
<code>$priv_text = get("privacy{$id}_{$priv_key}")</code>
<br>
Возвращает значение приватности в виде [[KittenDB_Friends_Privacy.wiki#Описание приватности|строки]], не обязательно той же самой, что была использована при создании или редактировании приватности, но [[KittenDB_Friends_Privacy.wiki#Канонический вид|эквивалентной]] ей. Если указанный пользователь или приватность не определены, возвращает <code>false</code>.

=== Удаление приватности ===
<code>delete("privacy{$id}_{$priv_key}");</code>

=== Проверка приватности ===
<code>get("{$user_id}~{$owner_id}:{$privacy_key}")</code>
<br>
Здесь $user_id - пользователь, запросивший проверку, $owner_id - владелец приватности, $privacy_key - ключ нужной приватности. Результат:

{|
|-
! Результат !! Смысл
|-
| <tt>false</tt> || Приватность не существует
|-
| <tt>?</tt> || Приватность не существует
|-
| <tt>0</tt> || Запрещено
|-
| <tt>1</tt> || Запрещено, если только пользователь не является другом друга
|-
| <tt>2</tt> || Разрешено, если только пользователь не является другом друга
|-
| <tt>3</tt> || Разрешено
|}
Значения 1 и 2 возвращаются только в том случае, если невозможно проверить, являются ли $user_id и $owner_id друзьями друзей, и это важно для получения результата. При нормальной работе должны появляться только значения 0 и 3.
<br>
Для проверки результата можно пользоваться условием <code>... if ($result >= 2) { ... }</code>.

Можно запросить проверку сразу нескольких приватностей:
<pre>
$res_array = $MC_Friends->get(array($key1, $key2, $key3, ...));
$res1 = $res_array[$key1];
...
</pre>
В этом случае запрашиваемые приватности должны иметь общего владельца, либо запрос следует направлять распределяющему серверу, полученному по <code>$inc->chooseFriendsPrivacyServer(0)</code>.

=== Проверка нескольких приватностей, принадлежащих одному пользователю ===
<code>get("{$user_id}~{$owner_id}:{$privacy_key1},{$privacy_key2},...,{$privacy_keyN}")</code>
<br>
В случае успешной проверки результат - строка ровно из N символов, представляющих собой результат проверки перечисленных приватностей; если какой-то приватности не существует, символ результата будет '?'.

== Альтернативный режим работы friends-engine ==
<br>
Альтернативный режим нужен для быстрого вычисления количества общих друзей с теми или иными пользователями.
<br>
См. [[KittenDB_Friends_Common.wiki|Общие друзья через friends-engine]].

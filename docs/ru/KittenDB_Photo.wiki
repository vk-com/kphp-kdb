''KittenDB Photo'' -- движок для хранения произвольных объектов с разбиением
их на альбомы и поддержанием независимого порядка объектов в каждом альбоме.

==Интерфейс==
Движок поддерживает memcached интерфейс и rpc-TL интерфейс. Описание
поддерживаемых rpc-TL запросов можно найти в схеме photo/photo.tl.
Движок поддерживает три режима: photo, audio и video, незначительно
отличающиеся функционалом. Будут описаны только запросы для режима photo.
Запросы для остальных режимов движка получаются заменой всех подстрок 'photo'
на название соответствующего режима. В дальнейшем речь будет идти о
фотографиях, но всё сказанное будет применимо и к любым другим объектам.

У каждого пользователя может быть до 32768 альбомов. В каждом альбоме может
быть до 32768 фотографий. На альбомах пользователя/фотографиях внутри альбома
поддерживается специальный порядок, в котором они будут выдаваться.

Основные выполняемые движком операции:
<br>
1. Добавление/удаление альбома/фотографии, восстановление недавно удалённой
фотографии.
<br>
2. Получение альбомов/фотографий в специальном порядке, а так же и в порядке
возрастания id с простейшими возможностями фильтрации возвращаемых объектов.
<br>
3. Изменение порядка выдачи альбомов/фотографий пользователя.
<br>
4. Изменение любых полей у существующих альбомов/фотографий.
<br>
5. Поддержка информации о местоположении фотографии для скачивания, в том
числе хранение данных в формате, используемом в ''KittenDB Storage''.

У каждой фотографии есть следующие обязательные поля:
<br>
id – уникальный идентификатор фотографии внутри фотографий пользователя, int,
<br>
album_id – идентификатор альбома, в котором эта фотография хранится, int,
<br>
owner_id – владелец фотографии, int.

У альбома есть следующие обязательные поля:
<br>
id – идентификатор альбома, уникальный внутри пользователя, int,
<br>
owner_id – владелец альбома, int.

Все остальные поля опциональны, но в пределах одного движка должны
принадлежать заранее предопределённому множеству полей. В данный момент
предопределить допустимые поля и их типы можно только в исходном коде движка в
функции init_types в photo/photo-data.c. Новые поля можно добавлять там же.
Для сохранения обратной совместимости их необходимо добавлять в конец списка.

==Поддерживаемые типы полей==
{|
|+ Поддерживаемые типы
|-
! Название !! Категории !! Диапазон !! Описание
|-
| int || Целочисленный, числовой || -2147483648 .. 2147483647 || Базовый целочисленный тип
|-
| long || Целочисленный, числовой || -2^63 .. 2^63 - 1 || Целочисленный тип повышенной точности
|-
| double || Вещественный, числовой || -1.8e+308 .. 1.8e+308 || Базовый вещественный тип
|-
| string || Строковый || 0 .. 32767 символов ||
|}


== Поддерживаемые операции ==

Везде
<br>
<code>$owner_id</code> – id пользователя, которому принадлежит фотография/альбом,
<br>
<code>$photo_id</code> – идентификатор фотографии, к которой применяется действие,
<br>
<code>$album_id</code> – идентификатор альбома, к которому применяется действие.

===Добавление новых фотографий===
<code>get("new_photo{$owner_id},{$album_id}[,$count]");</code>

<code>$count</code> – количество фотографий, которые необходимо добавить,
по умолчанию, одна.

Возвращает идентификатор первой из добавленных фотографий
<code>$new_photo_id</code> или 0 в случае ошибки. Если добавление прошло
успешно, то добавленные фотографии имеют идентификаторы
<code>$new_photo_id</code>, ..., <code>$new_photo_id + $count - 1</code>.
Фотографии добавляются в конец альбома. Альбомы с <code>$album_id < 0</code>
создаются автоматически при первом добавлении фотографий в них. При
переполнении таких альбомов, из них автоматически удаляются наиболее старые
фотографии.

===Добавление нового альбома===
<code>get("new_album{$owner_id}");</code>

Возвращает идентификатор добавленного альбома <code>$new_album_id</code> или 0
в случае ошибки. Альбом добавляется в конец списка альбома.

===Добавление новых фотографий с заданным id===
<code>get("new_photo_force{$owner_id},{$album_id},{$photo_id}[,$count]");</code>
<br>
<code>$photo_id</code> – идентификатор первой из добавляемых фотографий,
<br>
<code>$count</code> – количество фотографий, которые необходимо добавить,
по умолчанию, одна.

Фотографии добавляются в конец альбома.
В случае успеха возвращает строку "OK".

===Добавление нового альбома с заданным id===
<code>get("new_album_force{$owner_id},{$album_id}");</code>

Альбом добавляется в конец списка альбома.
В случае успеха возвращает строку "OK".

===Изменение информации о фотографии===
<code>set("change_photo{$owner_id},{$photo_id}", $changes);</code>
<br>
<code>$changes</code> – PHP-массив, ключами которого являются названия
изменяемых полей, а значениями – их новые значения.

===Изменение информации об альбоме===
<code>set("change_album{$owner_id},{$album_id}", $changes);</code>
<br>
<code>$changes</code> – PHP-массив, ключами которого являются названия
изменяемых полей, а значениями – их новые значения.

===Увеличение/уменьшение значения целочисленного поля фотографии===
<code>get("increment_photo_field{$owner_id},{$photo_id}[,{$cnt}]({$field_name})");</code>
<br>
<code>get("decrement_photo_field{$owner_id},{$photo_id}[,{$cnt}]({$field_name})");</code>
<br>
<code>$cnt</code> – величина, на которую увеличивается/уменьшается значение
поля, произвольное целое число, по умолчанию 1,
<br>
<code>$field_name</code> – имя изменяемого поля.

Неизменяемые поля, поля не типа int и поле album_id не могут быть изменены
при помощи этого метода. В случае успеха возвращает строку "OK".

===Увеличение/уменьшение значения целочисленного поля альбома===
<code>get("increment_album_field{$owner_id},{$album_id}[,{$cnt}]({$field_name})");</code>
<br>
<code>get("decrement_album_field{$owner_id},{$album_id}[,{$cnt}]({$field_name})");</code>
<br>
<code>$cnt</code> – величина, на которую увеличивается/уменьшается значение
поля, произвольное целое число, по умолчанию 1,
<br>
<code>$field_name</code> – имя изменяемого поля.

Неизменяемые поля и поля не типа int не могут быть изменены при помощи этого
метода. В случае успеха возвращает строку "OK".

===Изменение порядка фотографий внутри альбома===
<code>get("change_photo_order[_next]{$owner_id},{$photo_id},${near_photo_id}");</code>
<br>
<code>$near_photo_id</code> – идентификатор соседней фотографии. По умолчанию,
это фотография, после которой необходимо поставить данную или 0, если
фотографию следует переместить в начало альбома. В случае запроса с постфиксом
'_next', это фотография, перед которой необходимо поставить данную или 0, если
фотографию следует переместить в конец альбома.

В случае успеха возвращает строку "OK".

===Изменение порядка альбомов ===
<code>get("change_album_order[_next]{$owner_id},{$album_id},${near_album_id}");</code>
<br>
<code>$near_album_id</code> – идентификатор соседнего альбома. По умолчанию,
это альбом, после которого необходимо поставить данный или 0, если альбом
следует переместить в начало списка. В случае запроса с постфиксом '_next',
это альбом, перед которым необходимо поставить данный или 0, если альбом
следует переместить в конец списка.

В случае успеха возвращает строку "OK".

==Получение данных==

Везде 
<br>
<code>$owner_id</code> – id пользователя, которому принадлежит объект,
<br>
<code>$condition</code> – условие, по которому происходит фильтрация
результата. Должно удовлетворять следующей грамматике
<br>
<code>$condition := {$field_name}{$operation}{$field_value}|?{$field_name}</code>
<br>
<code>$condition := {$condition}&&{$condition}</code>
<br>
<code>$condition := {$condition}||{$condition}</code>
<br>
<code>$condition := ({$condition})</code>, где
<br>
<code>$field_name</code> – имя поля целочисленного типа, по которому
происходит фильтрация результата, 
<br>
<code>$operation</code> – операция, применяемая для фильтрации, на данный
момент одна из "=", "==", "===", "&lt;=", "!=", "&gt;=", "&lt;", "&lt;&gt;", "&gt;",
"&" (бинарное И),
<br>
<code>?{$field_name}</code> – проверяет наличие поля в объекте,
<br>
<code>$field_value</code> – значение, по которому происходит фильтрация
результата, целое число. 
<br>
Скобки используются для задания порядка выполнения логических операций && и ||.
По умолчанию, && обладает большим приоритетом, чем ||, то есть выполняется
раньше. Если условие некорректно, то фильтрация не производится.

=== Получение количества фотографий в альбоме пользователя ===
<code>get("photos_count{$owner_id},{$album_id}[($condition)]");</code>
<br>
<code>$album_id</code> – номер альбома, информация о количестве фотографий
которого запрашивается.

=== Получение количества альбомов пользователя ===
<code>get("albums_count{$owner_id}[($condition)]");</code>

=== Получение информации о фотографиях альбома или их списка ===
<code>get("photos[_reverse][_cnt]{$owner_id},{$album_id}[#[$offset,]$limit]({$return_fields}[|$condition])");</code>
<br>
<code>$album_id</code> – номер альбома, информация о фотографиях которого
запрашивается,
<br>
<code>$offset</code> – количество фотографий, которые необходимо пропустить
при выдаче,
<br>
<code>$limit</code> – максимальное количество фотографий, информацию о которых
можно вернуть,
<br>
<code>$return_fields</code> – список полей, разделённых запятой, которые
необходимо вернуть для каждой фотографии. В случае если список пустой,
будут возвращены только идентификаторы фотографий.

Информация о фотографиях возвращается в их специальном порядке в случае
запроса "photos" и в обратном к нему в случае запроса "photos_reverse".
Результат возвращается в виде PHP-массива, ключами которого являются
идентификаторы возвращаемых фотографий, а значениями – PHP-массивы с
запрошенными данными. Если не указаны возвращаемые поля, то значениями
тоже будут идентификаторы фотографий. Для получения информации о местоположении
фотографии следует указывать специальное поле "location". В этом случае будет
возвращена вся имеющаяся в движке информация о данной фотографии во всех её
поворотах. Если необходимо получить лишь информацию о не которых размерах
фотографии, хранимых в движке, то эти размеры указываются после "location",
включая поворот относительно текущего (по умолчанию 0), например,
"locationwxyz2" выдаст местоположения фотографий размеров w, x, y и z,
повёрнутых на 180 градусов относительно текущей. Для каждого размера "{$size}"
и поворота относительно текущего поворота "{$rotate}" результат будет
соответствовать ключу "location{$size}{$rotate}" и будет представлять собой
PHP-массив с полями server, volume_id, volume_local_id, extra и secret.
Если хотя бы для одного из размеров информация отсутствует, или была запрошена
вся информация о местоположениях фотографии, и соответствующие данные есть в
движке, то по ключу "location" возвращается PHP-массив с полями server,
source_user_id, orig_album_id и photo. Аналогично, для "original_location".
В случае запроса с постфиксом "_cnt" дополнительно по ключу "count" будет
возвращено общее количество фотографий, подходящих под запрос.

=== Получение информации об альбомах пользователя или их списка ===
<code>get("albums[_reverse][_cnt]{$owner_id}[#[$offset,]$limit]({$return_fields}[|$condition])");</code>
<br>
<code>$offset</code> – количество альбомов, которые необходимо пропустить при
выдаче,
<code>$limit</code> – максимальное количество альбомов, информацию о которых
можно вернуть,
<code>$return_fields</code> – список полей, разделённых запятой, которые
необходимо вернуть для каждого альбома. В случае если список пустой, будут
возвращены только идентификаторы альбомов.

Информация об альбомах возвращается в их специальном порядке в случае запроса
"albums" и в обратном к нему в случае запроса "albums_reverse". Результат
возвращается в виде PHP-массива, ключами которого являются идентификаторы
возвращаемых альбомов, а значениями – PHP-массивы с запрошенными данными.
Если не указаны возвращаемые поля, то значениями будут идентификаторы альбомов
или количество фотографий в альбоме в случае запроса с постфиксом "_cnt".
Так же в случае запроса с постфиксом "_cnt" по ключу "count" будет возвращено
общее количество альбомов, подходящих под запрос.


=== Получение информации об одной фотографии ===
<code>get("photo[_force]{$owner_id},{$photo_id}({$return_fields})");</code>
<br>
<code>$photo_id</code> – идентификатор фотографии, информация о которой
запрашивается,
<code>$return_fields</code> – список полей, разделённых запятой, которые
необходимо вернуть. Получение информации о местоположении происходит тем же
образом, что и в случае нескольких фотографий.

Результат возвращается в виде PHP-массива, ключами которого являются
запрошенные поля, а значениями запрошенные данные. Если список запрашиваемых
полей пуст, то возвращается вся имеющаяся о фотографии информация. В случае
запроса "_force" информация вернётся даже в случае, если фотография была
удалена в последние сутки. В этом случае ключу "deleted" будет соответствовать
значение 1.

=== Получение информации об одном альбоме ===
<code>get("album{$owner_id},{$album_id}({$return_fields})");</code>
<br>
<code>$album_id</code> – идентификатор альбома, информация о котором
запрашивается,
<br>
<code>$return_fields</code> – список полей, разделённых запятой, которые
необходимо вернуть.

Результат возвращается в виде PHP-массива, ключами которого являются
запрошенные поля, а значениями запрошенные данные. Если список запрашиваемых
полей пуст, то возвращается вся имеющаяся об альбоме информация.

=== Обзор фотографий в антихронологическом порядке ===
<code>get("photos_overview_albums[_reverse][_cnt]{$owner_id}[#[$offset,]$limit]({$albums})");</code>
<br>
или
<br>
<code>set("photos_overview_albums{$owner_id},{$random_tag}", $albums");</code>
<br>
<code>get("photos_overview[_reverse][_cnt]{$owner_id},{$random_tag}[#[$offset,]$limit]

===Удаление фотографии===
<code>delete("photo{$owner_id},{$photo_id}");</code>

===Удаление альбома===
<code>delete("album{$owner_id},{$album_id}");</code>
<br>
Альбом удаляется вместе со всеми фотографиями, которые в нём содержатся.
Действие необратимо. Удалённые таким образом фотографии нельзя восстановить
через restore_photo.

===Восстановление недавно удалённой фотографии===
<code>get("restore_photo{$owner_id},{$photo_id}");</code>
<br>
В случае успеха возвращает строку "OK".

==Изменение местоположения фотографии==

===Добавление информации о местоположении по старой системе хранения===
<code>get("add_photo_[original_]location{$owner_id},{$photo_id},{$server},{$server2},{$source_user_id},{$orig_album_id}({$photo})");</code>
<br>
В случае успеха возвращает строку "OK".

===Добавление информации о местоположении по новой системе хранения===
<code>get("add_photo_[original_]location_engine[{$rotate}]_{$size}{$owner_id},{$photo_id},{$volume_id},{$local_id},{$extra},{$secret}");</code>
<br>
<code>$rotate</code> – поворот фотографии, относительно текущего,
по умолчанию 0,
<br>
<code>$size</code> – размер фотографии, строчная латинская буква.
<br>
В случае успеха возвращает строку "OK".

===Изменение информации о сервере по старой системе хранения===
<code>get("change_photo_[original_]location_server{$owner_id},{$photo_id},{$server}[,2]");</code>
<br>
<code>$server</code> – новое значение поля server,
необязательный параметр 2 указывает на необходимость изменить поле server2,
а не поле server.
<br>
В случае успеха возвращает строку "OK".

===Удаление информации о местоположении по старой системе хранения===
<code>get("del_photo_[original_]location{$owner_id},{$photo_id}");</code>

===Удаление информации о местоположении по новой системе хранения===
<code>get("del_photo_[original_]location_engine[{$rotate}]_[{$size}]{$owner_id},{$photo_id}");</code>
<br>
<code>$rotate</code> – поворот фотографии относительно текущего, информация о
местоположении которой удаляется,
<br>
<code>$size</code> – размер фотографии, информация о местоположении которой
удаляется, строчная латинская буква.
<br>
Если не указан <code>$rotate</code>, то будут удалены все данные о
местоположении фотографий указанного размера. Если не указан <code>$size</code>,
то будут удалены все данные о местоположении указанного поворота. Если
не указаны ни <code>$rotate</code>, ни <code>$size</code>, будут удалены все
данные о местоположении фотографии по новой системе хранения.
<br>
В случае успеха возвращает строку "OK".

===Сохранение поля location в original_location===
<code>get("save_photo_location{$owner_id},{$photo_id}");</code>
<br>
Копирует поле location в original_location, очищает location. Если
original_location было не пусто, ничего не делает.
<br>
В случае успеха возвращает строку "OK".

===Восстановление поля location из original_location===
<code>get("restore_photo_location{$owner_id},{$photo_id}");</code>
<br>
Копирует поле original_location в location, очищает original_location. Если
original_location было пусто, ничего не делает.
<br>
В случае успеха возвращает строку "OK".

===Вращение фотографии===
<code>get("rotate_photo{$owner_id},{$photo_id},{$direction}");</code>
<br>
<code>$direction</code> – направление вращения фотографии, число -1, 1 или 3.
<br>
У каждой фотографии есть "текущий" поворот, информация о местоположении
которого будет выдаваться движком. Ссылки на файлы с другими поворотами также
сохраняются в движке. После осуществления поворота информацию о новом
местоположении фотографии следует загрузить в движок, если таковая в нём
отсутствует (при хранении старым способом это невозможно).
<br>
В случае успеха возвращает строку "OK".

===Изменение сервера, на котором хранится данный том===
<code>get("set_volume{$volume_id},{$server}");</code>
<br>
<code>$volume_id</code> – идентификатор тома,
<br>
<code>$server</code> – номер сервера, на котором этот том сейчас расположен.
Для удаления тома можно указать 0.

В случае успеха возвращает строку "OK".

==Форсированная синхронизация пишущей и читающей копии==

===Получение текущей позиции бинлога из пишущей копии===
<code>get("synchronize");</code>
<br>
Запускает асинхронную запись бинлога на жёсткий диск, не ждёт завершения записи.
Возвращает строку – текущую позицию бинлога {$pos}.

===Чтение бинлога до текущей позиции читающей копией===
<code>get("synchronize{$pos}");</code>
<br>
<code>$pos</code> – текущая позиция бинлога, полученная предыдущим запросом
из пишущей копии.

